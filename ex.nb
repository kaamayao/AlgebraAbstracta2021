(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    153947,       2566]
NotebookOptionsPosition[    153371,       2548]
NotebookOutlinePosition[    153773,       2564]
CellTagsIndexPosition[    153730,       2561]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"session", " ", "=", " ", 
   RowBox[{"StartExternalSession", "[", "\"\<Python\>\"", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.830525815913726*^9, 3.830525831717272*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"d2502aae-c5e8-4630-b1d9-088bf79c5ad8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"matrixReact", " ", "=", " ", 
  RowBox[{"ExternalEvaluate", "[", 
   RowBox[{"session", ",", 
    RowBox[{"File", "[", "\"\<main.py\>\"", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.8305258460199423`*^9, {3.830637729050177*^9, 3.8306377536593657`*^9}, 
   3.8306379258946857`*^9, {3.830639909563731*^9, 3.830639959447997*^9}, {
   3.8306399906296597`*^9, 3.830640017468376*^9}, {3.830640093279132*^9, 
   3.830640122525923*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"d4a07d14-ac54-41ec-b099-e209095eeed9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"can't invoke \\\"destroy\\\" command: application has \
been destroyed\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"can't invoke \\\"destroy\\\" command: application has \
been destroyed\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"TclError\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TclError\"", "\" \"", 
                    "\"can't invoke \\\"destroy\\\" command: application has \
been destroyed\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TclError\"", "\" \"", 
                    "\"can't invoke \\\"destroy\\\" command: application has \
been destroyed\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  16.  \""}, {"\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      __traceback_hidden_variables__ = True\""}, {
                    "\"  21.  \""}, {"\"  22.      try:\""}, {
                    ItemBox[
                    "\"  23.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  24.      except Exception as export_exception:\""}, {
                    "\"  25.          try:\""}, {
                    "\"  26.              try:\""}, {"\"  27.  \""}, {
                    "\"  28.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  29.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{"  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", 
                    "  20.      __traceback_hidden_variables__ = True", 
                    "  21.  ", "  22.      try:", 
                    Item[
                    "  23.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  24.      except Exception as export_exception:", 
                    "  25.          try:", "  26.              try:", 
                    "  27.  ", 
                    "  28.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    
                    "  29.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"handle_message\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"handle_message\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 171.  \""}, {"\" 172.  \""}, {
                    "\" 173.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):\""}, {"\" 174.  \""}, {
                    "\" 175.      __traceback_hidden_variables__ = True\""}, {
                    "\" 176.  \""}, {
                    "\" 177.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\""}, {
                    ItemBox[
                    "\" 178.      result = evaluate_message(**message)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 179.  \""}, {
                    "\" 180.      sys.stdout.flush()\""}, {
                    "\" 181.      return result\""}, {"\" 182.  \""}, {
                    "\" 183.  \""}, {
                    "\" 184.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "handle_message"}], 
                    Column[{
                    
                    Column[{" 171.  ", " 172.  ", 
                    " 173.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):", " 174.  ", 
                    " 175.      __traceback_hidden_variables__ = True", 
                    " 176.  ", 
                    " 177.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Item[
                    " 178.      result = evaluate_message(**message)", 
                    Background -> LightYellow], " 179.  ", 
                    " 180.      sys.stdout.flush()", 
                    " 181.      return result", " 182.  ", " 183.  ", 
                    " 184.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"evaluate_message\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"evaluate_message\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 152.  def evaluate_message(input=None, \
return_type=None, args=None, **opts):\""}, {"\" 153.  \""}, {
                    "\" 154.      __traceback_hidden_variables__ = True\""}, {
                    "\" 155.  \""}, {"\" 156.      result = None\""}, {
                    "\" 157.  \""}, {
                    "\" 158.      if isinstance(input, \
six.string_types):\""}, {
                    ItemBox[
                    "\" 159.          result = execute_from_string(input, \
**opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 160.  \""}, {
                    "\" 161.      if isinstance(args, (list, tuple)):\""}, {
                    "\" 162.          # then we have a function call to \
do\""}, {"\" 163.          # first get the function object we need to \
call\""}, {"\" 164.          result = result(*args)\""}, {"\" 165.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "evaluate_message"}], 
                    
                    Column[{
                    
                    Column[{
                    " 152.  def evaluate_message(input=None, \
return_type=None, args=None, **opts):", " 153.  ", 
                    " 154.      __traceback_hidden_variables__ = True", 
                    " 155.  ", " 156.      result = None", " 157.  ", 
                    " 158.      if isinstance(input, six.string_types):", 
                    Item[
                    " 159.          result = execute_from_string(input, \
**opts)", Background -> LightYellow], " 160.  ", 
                    " 161.      if isinstance(args, (list, tuple)):", 
                    " 162.          # then we have a function call to do", 
                    " 163.          # first get the function object we need \
to call", " 164.          result = result(*args)", " 165.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"execute_from_string\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"execute_from_string\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  81.  \""}, {
                    "\"  82.      last_expr = last(expressions)\""}, {
                    "\"  83.  \""}, {
                    "\"  84.      if isinstance(last_expr, ast.Expr):\""}, {
                    "\"  85.          result = expressions.pop(-1)\""}, {
                    "\"  86.  \""}, {"\"  87.      if expressions:\""}, {
                    ItemBox[
                    "\"  88.          exec(compile(Module(expressions), \
\\\"\\\", \\\"exec\\\"), env)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\"  89.  \""}, {
                    "\"  90.      if result:\""}, {
                    "\"  91.          return \
eval(compile(ast.Expression(result.value), \\\"\\\", \\\"eval\\\"), env)\""}, \
{"\"  92.  \""}, {
                    "\"  93.      elif isinstance(last_expr, \
(ast.FunctionDef, ast.ClassDef)):\""}, {
                    "\"  94.          return env[last_expr.name]\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"code\"", 
                    "\"from tkinter import *\\n\\nmatrixReact = \
[]\\n\\n\\nclass chemReactNumber(Frame):\\n    numberChemReact = 0\\n    \
speciesReact = []\\n    chemReact = []\\n    step = 0\\n    \
chemReactFrameIsFilled = False\\n    speciesFrameIsFilled = False\\n    \
reactionsFrameIsFilled = False\\n    noSpeciesStep2 = 0\\n    noSpeciesStep3 \
= 0\\n    noChemReacts = 0\\n\\n    def __init__(self, master=None):\\n       \
 super().__init__(master)\\n        master.columnconfigure(0, weight=1)\\n    \
    master.columnconfigure(1, weight=1)\\n        master.rowconfigure(0, \
weight=10)\\n        master.rowconfigure(1, weight=1)\\n        self.master = \
master\\n        self.start()\\n\\n    def start(self):\\n        \
self.startFrames()\\n        self.showStep(self.step)\\n\\n    def \
startFrames(self):\\n        self.noChemReactFrame = Frame(root, bg=\\\"white\
\\\")\\n        self.speciesFrame = Frame(root, bg=\\\"white\\\")\\n        \
self.reactionsFrame = Frame(root, bg=\\\"white\\\")\\n        self.frameNav = \
Frame(root);\\n\\n    def showStep(self, step):\\n        \
self.noChemReactFrame.grid_remove()\\n        self.speciesFrame.grid_remove()\
\\n        self.reactionsFrame.grid_remove()\\n        \
self.frameNav.grid_remove()\\n\\n        if (step == 0):\\n            \
self.noChemReactFrame.grid(sticky=\\\"nsew\\\", row=0, columnspan=2)\\n       \
     if not self.chemReactFrameIsFilled:\\n                \
self.fillChemReactFrame(self.noChemReactFrame)\\n                \
self.chemReactFrameIsFilled = True\\n\\n        elif (step == 1):\\n          \
  self.speciesFrame.grid(sticky=\\\"nsew\\\", row=0, columnspan=2)\\n         \
   self.fillSpeciesFrame(self.speciesFrame)\\n\\n        elif (step == 2):\\n \
           self.reactionsFrame.grid(sticky=\\\"nsew\\\", row=0, columnspan=2)\
\\n            self.fillChemReactionsFrame(self.reactionsFrame)\\n            \
self.reactionsFrameIsFilled = True\\n\\n        else:\\n            \
self.makeChemEqMatrix()\\n            root.quit()\\n\\n        \
self.fillFrameNav(self.frameNav)\\n        self.frameNav.grid(row=1)\\n\\n    \
def fillFrameNav(self, frame):\\n        frame.grid()\\n        Button(root, \
text='Back', command=self.moveBackStep).grid(\\n            row=1, column=0, \
sticky='nesw', pady=10, padx=10)\\n        Button(root, text='Next', \
command=self.moveNextStep).grid(\\n            row=1, column=1, \
sticky='nesw', pady=10, padx=10)\\n\\n    def moveNextStep(self):\\n        \
self.step = self.step + 1\\n        self.showStep(self.step)\\n\\n    def \
moveBackStep(self):\\n        self.step = self.step - 1\\n        \
self.showStep(self.step)\\n\\n    def fillChemReactFrame(self, frame):\\n     \
   inputFrame = Frame(frame, bg=\\\"white\\\")\\n        textField1 = \
Frame(inputFrame, bg=\\\"white\\\")\\n        textField2 = Frame(inputFrame, \
bg=\\\"white\\\")\\n        Label(textField1, text=\\\"Number of \
Species:\\\", bg=\\\"white\\\").grid(sticky='nesw', row=0)\\n        \
self.numberSpecies = Entry(textField1)\\n        \
self.numberSpecies.grid(sticky='nesw', row=1)\\n        Label(textField2, \
text=\\\"Number of Chem reactions:\\\", bg=\\\"white\\\").grid(row=2)\\n      \
  self.numberChemReact = Entry(textField2)\\n        \
self.numberChemReact.grid(row=3, sticky='nesw')\\n        \
frame.columnconfigure(0, weight=1)\\n        inputFrame.grid(pady=10)\\n      \
  textField1.grid(pady=15, sticky='nesw')\\n        textField2.grid(pady=15, \
sticky='nesw')\\n\\n    def fillSpeciesFrame(self, frame):\\n        if \
(self.noSpeciesStep2 != int(self.numberSpecies.get())):\\n            \
self.noSpeciesStep2 = int(self.numberSpecies.get())\\n            \
frame.grid()\\n            Label(frame, text=\\\"Species names\\\", \
bg=\\\"white\\\").grid(row=0, pady=8)\\n            frameSpecies = \
Frame(frame, bg=\\\"white\\\")\\n            rowSpecie = 1\\n            for \
noSpecie in range(self.noSpeciesStep2):\\n                if (noSpecie % 3 == \
0):\\n                    rowSpecie = rowSpecie + 1\\n                    \
columnSpecies = 0\\n                Label(frameSpecies, text=\\\"Species #%i:\
\\\" % (noSpecie + 1), bg=\\\"white\\\").grid(\\n                    \
row=rowSpecie, column=columnSpecies * 2)\\n                \
self.speciesReact.append(Entry(frameSpecies, width=10))\\n                \
self.speciesReact[noSpecie].grid(\\n                    row=rowSpecie, \
column=(columnSpecies * 2) + 1, padx=5, pady=5)\\n                \
columnSpecies = columnSpecies + 1\\n            \
frameSpecies.grid(sticky='nesw', pady=15, padx=15, row=1)\\n            \
frame.columnconfigure(0, weight=1)\\n            \
self.numberChemReact.grid(row=1)\\n\\n    def fillChemReactionsFrame(self, \
frame):\\n        if (self.noSpeciesStep3 != int(self.numberSpecies.get()) or\
\\n                self.noChemReacts != int(self.numberChemReact.get())):\\n  \
          self.noSpeciesStep3 = int(self.numberSpecies.get())\\n            \
self.noChemReacts = int(self.numberChemReact.get())\\n            \
Label(frame, text=\\\"Reactions\\\", bg=\\\"white\\\").grid(pady=8, row=0)\\n \
           reactionsFrame = Frame(frame, bg=\\\"white\\\")\\n\\n            \
for noSpecie in range(self.noSpeciesStep3):\\n                \
Label(reactionsFrame, text=\\\"L %s\\\" % \
self.speciesReact[noSpecie].get(),bg=\\\"white\\\").grid(\\n                  \
  row=0, column=noSpecie)\\n\\n            for noSpecie in \
range(self.noSpeciesStep3):\\n                Label(reactionsFrame, \
text=\\\"R %s\\\" % self.speciesReact[noSpecie].get(),bg=\\\"white\\\").grid(\
\\n                    row=0, column=(self.noSpeciesStep3 + noSpecie))\\n\\n  \
          Label(reactionsFrame, text=\\\"==>\\\", \
bg=\\\"white\\\").grid(row=0, column=(self.noSpeciesStep3 * 2))\\n\\n         \
   for noSpecie in range(self.noSpeciesStep3):\\n                \
Label(reactionsFrame, text=\\\"L %s\\\" % self.speciesReact[noSpecie].get(), \
bg=\\\"white\\\").grid(\\n                    row=0, column=(noSpecie + \
(self.noSpeciesStep3 * 2) + 1))\\n\\n            for noSpecie in \
range(self.noSpeciesStep3):\\n                Label(reactionsFrame, \
text=\\\"R %s\\\" % self.speciesReact[noSpecie].get(), \
bg=\\\"white\\\").grid(\\n                    row=0, column=(noSpecie + \
self.noSpeciesStep3 + (self.noSpeciesStep3 * 2) + 1))\\n\\n            for \
noChemReact in range(self.noChemReacts):\\n                \
self.chemReact.append([]);\\n                for noSpecie in \
range(self.noSpeciesStep3 * 2):\\n                    \
self.chemReact[noChemReact].append(Entry(reactionsFrame, width=5))\\n         \
           self.chemReact[noChemReact][noSpecie].grid(\\n                     \
   row=noChemReact + 1, column=noSpecie, padx=5, pady=5)\\n\\n            for \
noChemReact in range(self.noChemReacts):\\n                for noSpecie in \
range(self.noSpeciesStep3 * 2):\\n                    \
self.chemReact[noChemReact].append(Entry(reactionsFrame, width=5))\\n         \
           self.chemReact[noChemReact][noSpecie + (self.noSpeciesStep3 * \
2)].grid(\\n                        row=(noChemReact) + 1, column=(noSpecie + \
(self.noSpeciesStep3 * 2)) + 1, padx=5, pady=5)\\n\\n            \
reactionsFrame.grid(sticky='nesw', pady=15, padx=15, row=1)\\n            \
frame.rowconfigure(1, weight=1)\\n            frame.columnconfigure(0, \
weight=1)\\n\\n    def makeChemEqMatrix(self):\\n        for i in \
range(len(self.chemReact)):\\n            matrixReact.append([])\\n           \
 for j in range(len(self.chemReact[i])):\\n                \
matrixReact[i].append(self.chemReact[i][j].get())\\n        \
n=len(matrixReact)\\n        for k in range(n):\\n            \
matrixReact.append(matrixReact[k])\\n\\nroot = Tk()\\nroot.minsize(600, \
250)\\nroot.title(\\\"ODE CHEM\\\")\\napp = \
chemReactNumber(master=root)\\napp.mainloop()\\nroot.destroy()\\nmatrixReact\"\
"}, {"\"globals\"", "\"{}\""}, {"\"opts\"", "\"{'constants': {}}\""}, {
                    "\"result\"", 
                    "\"<ast.Expr object at 0x7f48a4486b50>\""}, {
                    "\"expressions\"", 
                    "\"[<ast.ImportFrom object at 0x7f48a44f0d90>, \
<ast.Assign object at 0x7f48a44f0d00>, <ast.ClassDef object at \
0x7f48a44f0c70>, <ast.Assign object at 0x7f48a4486520>, <ast.Expr object at \
0x7f48a44865e0>, <ast.Expr object at 0x7f48a4486730>, <ast.Assign object at \
0x7f48a4486850>, <ast.Expr object at 0x7f48a4486970>, <ast.Expr object at \
0x7f48a4486a60>]\""}, {"\"last_expr\"", 
                    "\"<ast.Expr object at 0x7f48a4486b50>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"code", 
                    "from tkinter import *\n\nmatrixReact = []\n\n\nclass \
chemReactNumber(Frame):\n    numberChemReact = 0\n    speciesReact = []\n    \
chemReact = []\n    step = 0\n    chemReactFrameIsFilled = False\n    \
speciesFrameIsFilled = False\n    reactionsFrameIsFilled = False\n    \
noSpeciesStep2 = 0\n    noSpeciesStep3 = 0\n    noChemReacts = 0\n\n    def \
__init__(self, master=None):\n        super().__init__(master)\n        \
master.columnconfigure(0, weight=1)\n        master.columnconfigure(1, \
weight=1)\n        master.rowconfigure(0, weight=10)\n        \
master.rowconfigure(1, weight=1)\n        self.master = master\n        \
self.start()\n\n    def start(self):\n        self.startFrames()\n        \
self.showStep(self.step)\n\n    def startFrames(self):\n        \
self.noChemReactFrame = Frame(root, bg=\"white\")\n        self.speciesFrame \
= Frame(root, bg=\"white\")\n        self.reactionsFrame = Frame(root, \
bg=\"white\")\n        self.frameNav = Frame(root);\n\n    def showStep(self, \
step):\n        self.noChemReactFrame.grid_remove()\n        \
self.speciesFrame.grid_remove()\n        self.reactionsFrame.grid_remove()\n  \
      self.frameNav.grid_remove()\n\n        if (step == 0):\n            \
self.noChemReactFrame.grid(sticky=\"nsew\", row=0, columnspan=2)\n            \
if not self.chemReactFrameIsFilled:\n                \
self.fillChemReactFrame(self.noChemReactFrame)\n                \
self.chemReactFrameIsFilled = True\n\n        elif (step == 1):\n            \
self.speciesFrame.grid(sticky=\"nsew\", row=0, columnspan=2)\n            \
self.fillSpeciesFrame(self.speciesFrame)\n\n        elif (step == 2):\n       \
     self.reactionsFrame.grid(sticky=\"nsew\", row=0, columnspan=2)\n         \
   self.fillChemReactionsFrame(self.reactionsFrame)\n            \
self.reactionsFrameIsFilled = True\n\n        else:\n            \
self.makeChemEqMatrix()\n            root.quit()\n\n        \
self.fillFrameNav(self.frameNav)\n        self.frameNav.grid(row=1)\n\n    \
def fillFrameNav(self, frame):\n        frame.grid()\n        Button(root, \
text='Back', command=self.moveBackStep).grid(\n            row=1, column=0, \
sticky='nesw', pady=10, padx=10)\n        Button(root, text='Next', \
command=self.moveNextStep).grid(\n            row=1, column=1, sticky='nesw', \
pady=10, padx=10)\n\n    def moveNextStep(self):\n        self.step = \
self.step + 1\n        self.showStep(self.step)\n\n    def \
moveBackStep(self):\n        self.step = self.step - 1\n        \
self.showStep(self.step)\n\n    def fillChemReactFrame(self, frame):\n        \
inputFrame = Frame(frame, bg=\"white\")\n        textField1 = \
Frame(inputFrame, bg=\"white\")\n        textField2 = Frame(inputFrame, \
bg=\"white\")\n        Label(textField1, text=\"Number of Species:\", \
bg=\"white\").grid(sticky='nesw', row=0)\n        self.numberSpecies = \
Entry(textField1)\n        self.numberSpecies.grid(sticky='nesw', row=1)\n    \
    Label(textField2, text=\"Number of Chem reactions:\", \
bg=\"white\").grid(row=2)\n        self.numberChemReact = Entry(textField2)\n \
       self.numberChemReact.grid(row=3, sticky='nesw')\n        \
frame.columnconfigure(0, weight=1)\n        inputFrame.grid(pady=10)\n        \
textField1.grid(pady=15, sticky='nesw')\n        textField2.grid(pady=15, \
sticky='nesw')\n\n    def fillSpeciesFrame(self, frame):\n        if \
(self.noSpeciesStep2 != int(self.numberSpecies.get())):\n            \
self.noSpeciesStep2 = int(self.numberSpecies.get())\n            frame.grid()\
\n            Label(frame, text=\"Species names\", bg=\"white\").grid(row=0, \
pady=8)\n            frameSpecies = Frame(frame, bg=\"white\")\n            \
rowSpecie = 1\n            for noSpecie in range(self.noSpeciesStep2):\n      \
          if (noSpecie % 3 == 0):\n                    rowSpecie = rowSpecie \
+ 1\n                    columnSpecies = 0\n                \
Label(frameSpecies, text=\"Species #%i:\" % (noSpecie + 1), \
bg=\"white\").grid(\n                    row=rowSpecie, column=columnSpecies \
* 2)\n                self.speciesReact.append(Entry(frameSpecies, width=10))\
\n                self.speciesReact[noSpecie].grid(\n                    \
row=rowSpecie, column=(columnSpecies * 2) + 1, padx=5, pady=5)\n              \
  columnSpecies = columnSpecies + 1\n            \
frameSpecies.grid(sticky='nesw', pady=15, padx=15, row=1)\n            \
frame.columnconfigure(0, weight=1)\n            \
self.numberChemReact.grid(row=1)\n\n    def fillChemReactionsFrame(self, \
frame):\n        if (self.noSpeciesStep3 != int(self.numberSpecies.get()) or\n\
                self.noChemReacts != int(self.numberChemReact.get())):\n      \
      self.noSpeciesStep3 = int(self.numberSpecies.get())\n            \
self.noChemReacts = int(self.numberChemReact.get())\n            Label(frame, \
text=\"Reactions\", bg=\"white\").grid(pady=8, row=0)\n            \
reactionsFrame = Frame(frame, bg=\"white\")\n\n            for noSpecie in \
range(self.noSpeciesStep3):\n                Label(reactionsFrame, text=\"L \
%s\" % self.speciesReact[noSpecie].get(),bg=\"white\").grid(\n                \
    row=0, column=noSpecie)\n\n            for noSpecie in \
range(self.noSpeciesStep3):\n                Label(reactionsFrame, text=\"R \
%s\" % self.speciesReact[noSpecie].get(),bg=\"white\").grid(\n                \
    row=0, column=(self.noSpeciesStep3 + noSpecie))\n\n            \
Label(reactionsFrame, text=\"==>\", bg=\"white\").grid(row=0, \
column=(self.noSpeciesStep3 * 2))\n\n            for noSpecie in \
range(self.noSpeciesStep3):\n                Label(reactionsFrame, text=\"L \
%s\" % self.speciesReact[noSpecie].get(), bg=\"white\").grid(\n               \
     row=0, column=(noSpecie + (self.noSpeciesStep3 * 2) + 1))\n\n            \
for noSpecie in range(self.noSpeciesStep3):\n                \
Label(reactionsFrame, text=\"R %s\" % self.speciesReact[noSpecie].get(), \
bg=\"white\").grid(\n                    row=0, column=(noSpecie + \
self.noSpeciesStep3 + (self.noSpeciesStep3 * 2) + 1))\n\n            for \
noChemReact in range(self.noChemReacts):\n                \
self.chemReact.append([]);\n                for noSpecie in \
range(self.noSpeciesStep3 * 2):\n                    \
self.chemReact[noChemReact].append(Entry(reactionsFrame, width=5))\n          \
          self.chemReact[noChemReact][noSpecie].grid(\n                       \
 row=noChemReact + 1, column=noSpecie, padx=5, pady=5)\n\n            for \
noChemReact in range(self.noChemReacts):\n                for noSpecie in \
range(self.noSpeciesStep3 * 2):\n                    \
self.chemReact[noChemReact].append(Entry(reactionsFrame, width=5))\n          \
          self.chemReact[noChemReact][noSpecie + (self.noSpeciesStep3 * \
2)].grid(\n                        row=(noChemReact) + 1, column=(noSpecie + \
(self.noSpeciesStep3 * 2)) + 1, padx=5, pady=5)\n\n            \
reactionsFrame.grid(sticky='nesw', pady=15, padx=15, row=1)\n            \
frame.rowconfigure(1, weight=1)\n            frame.columnconfigure(0, \
weight=1)\n\n    def makeChemEqMatrix(self):\n        for i in \
range(len(self.chemReact)):\n            matrixReact.append([])\n            \
for j in range(len(self.chemReact[i])):\n                \
matrixReact[i].append(self.chemReact[i][j].get())\n        n=len(matrixReact)\
\n        for k in range(n):\n            matrixReact.append(matrixReact[k])\n\
\nroot = Tk()\nroot.minsize(600, 250)\nroot.title(\"ODE CHEM\")\napp = \
chemReactNumber(master=root)\napp.mainloop()\nroot.destroy()\nmatrixReact"}, {
                    "globals", "{}"}, {"opts", "{'constants': {}}"}, {
                    "result", "<ast.Expr object at 0x7f48a4486b50>"}, {
                    "expressions", 
                    "[<ast.ImportFrom object at 0x7f48a44f0d90>, <ast.Assign \
object at 0x7f48a44f0d00>, <ast.ClassDef object at 0x7f48a44f0c70>, \
<ast.Assign object at 0x7f48a4486520>, <ast.Expr object at 0x7f48a44865e0>, \
<ast.Expr object at 0x7f48a4486730>, <ast.Assign object at 0x7f48a4486850>, \
<ast.Expr object at 0x7f48a4486970>, <ast.Expr object at 0x7f48a4486a60>]"}, {
                    "last_expr", "<ast.Expr object at 0x7f48a4486b50>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", 
                    "execute_from_string"}], 
                    Column[{
                    
                    Column[{"  81.  ", 
                    "  82.      last_expr = last(expressions)", "  83.  ", 
                    "  84.      if isinstance(last_expr, ast.Expr):", 
                    "  85.          result = expressions.pop(-1)", "  86.  ", 
                    "  87.      if expressions:", 
                    Item[
                    "  88.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", Background -> LightYellow], "  89.  ", 
                    "  90.      if result:", 
                    "  91.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", "  92.  ", 
                    "  93.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", "  94.          return env[last_expr.name]"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"code", 
                    "from tkinter import *\n\nmatrixReact = []\n\n\nclass \
chemReactNumber(Frame):\n    numberChemReact = 0\n    speciesReact = []\n    \
chemReact = []\n    step = 0\n    chemReactFrameIsFilled = False\n    \
speciesFrameIsFilled = False\n    reactionsFrameIsFilled = False\n    \
noSpeciesStep2 = 0\n    noSpeciesStep3 = 0\n    noChemReacts = 0\n\n    def \
__init__(self, master=None):\n        super().__init__(master)\n        \
master.columnconfigure(0, weight=1)\n        master.columnconfigure(1, \
weight=1)\n        master.rowconfigure(0, weight=10)\n        \
master.rowconfigure(1, weight=1)\n        self.master = master\n        \
self.start()\n\n    def start(self):\n        self.startFrames()\n        \
self.showStep(self.step)\n\n    def startFrames(self):\n        \
self.noChemReactFrame = Frame(root, bg=\"white\")\n        self.speciesFrame \
= Frame(root, bg=\"white\")\n        self.reactionsFrame = Frame(root, \
bg=\"white\")\n        self.frameNav = Frame(root);\n\n    def showStep(self, \
step):\n        self.noChemReactFrame.grid_remove()\n        \
self.speciesFrame.grid_remove()\n        self.reactionsFrame.grid_remove()\n  \
      self.frameNav.grid_remove()\n\n        if (step == 0):\n            \
self.noChemReactFrame.grid(sticky=\"nsew\", row=0, columnspan=2)\n            \
if not self.chemReactFrameIsFilled:\n                \
self.fillChemReactFrame(self.noChemReactFrame)\n                \
self.chemReactFrameIsFilled = True\n\n        elif (step == 1):\n            \
self.speciesFrame.grid(sticky=\"nsew\", row=0, columnspan=2)\n            \
self.fillSpeciesFrame(self.speciesFrame)\n\n        elif (step == 2):\n       \
     self.reactionsFrame.grid(sticky=\"nsew\", row=0, columnspan=2)\n         \
   self.fillChemReactionsFrame(self.reactionsFrame)\n            \
self.reactionsFrameIsFilled = True\n\n        else:\n            \
self.makeChemEqMatrix()\n            root.quit()\n\n        \
self.fillFrameNav(self.frameNav)\n        self.frameNav.grid(row=1)\n\n    \
def fillFrameNav(self, frame):\n        frame.grid()\n        Button(root, \
text='Back', command=self.moveBackStep).grid(\n            row=1, column=0, \
sticky='nesw', pady=10, padx=10)\n        Button(root, text='Next', \
command=self.moveNextStep).grid(\n            row=1, column=1, sticky='nesw', \
pady=10, padx=10)\n\n    def moveNextStep(self):\n        self.step = \
self.step + 1\n        self.showStep(self.step)\n\n    def \
moveBackStep(self):\n        self.step = self.step - 1\n        \
self.showStep(self.step)\n\n    def fillChemReactFrame(self, frame):\n        \
inputFrame = Frame(frame, bg=\"white\")\n        textField1 = \
Frame(inputFrame, bg=\"white\")\n        textField2 = Frame(inputFrame, \
bg=\"white\")\n        Label(textField1, text=\"Number of Species:\", \
bg=\"white\").grid(sticky='nesw', row=0)\n        self.numberSpecies = \
Entry(textField1)\n        self.numberSpecies.grid(sticky='nesw', row=1)\n    \
    Label(textField2, text=\"Number of Chem reactions:\", \
bg=\"white\").grid(row=2)\n        self.numberChemReact = Entry(textField2)\n \
       self.numberChemReact.grid(row=3, sticky='nesw')\n        \
frame.columnconfigure(0, weight=1)\n        inputFrame.grid(pady=10)\n        \
textField1.grid(pady=15, sticky='nesw')\n        textField2.grid(pady=15, \
sticky='nesw')\n\n    def fillSpeciesFrame(self, frame):\n        if \
(self.noSpeciesStep2 != int(self.numberSpecies.get())):\n            \
self.noSpeciesStep2 = int(self.numberSpecies.get())\n            frame.grid()\
\n            Label(frame, text=\"Species names\", bg=\"white\").grid(row=0, \
pady=8)\n            frameSpecies = Frame(frame, bg=\"white\")\n            \
rowSpecie = 1\n            for noSpecie in range(self.noSpeciesStep2):\n      \
          if (noSpecie % 3 == 0):\n                    rowSpecie = rowSpecie \
+ 1\n                    columnSpecies = 0\n                \
Label(frameSpecies, text=\"Species #%i:\" % (noSpecie + 1), \
bg=\"white\").grid(\n                    row=rowSpecie, column=columnSpecies \
* 2)\n                self.speciesReact.append(Entry(frameSpecies, width=10))\
\n                self.speciesReact[noSpecie].grid(\n                    \
row=rowSpecie, column=(columnSpecies * 2) + 1, padx=5, pady=5)\n              \
  columnSpecies = columnSpecies + 1\n            \
frameSpecies.grid(sticky='nesw', pady=15, padx=15, row=1)\n            \
frame.columnconfigure(0, weight=1)\n            \
self.numberChemReact.grid(row=1)\n\n    def fillChemReactionsFrame(self, \
frame):\n        if (self.noSpeciesStep3 != int(self.numberSpecies.get()) or\n\
                self.noChemReacts != int(self.numberChemReact.get())):\n      \
      self.noSpeciesStep3 = int(self.numberSpecies.get())\n            \
self.noChemReacts = int(self.numberChemReact.get())\n            Label(frame, \
text=\"Reactions\", bg=\"white\").grid(pady=8, row=0)\n            \
reactionsFrame = Frame(frame, bg=\"white\")\n\n            for noSpecie in \
range(self.noSpeciesStep3):\n                Label(reactionsFrame, text=\"L \
%s\" % self.speciesReact[noSpecie].get(),bg=\"white\").grid(\n                \
    row=0, column=noSpecie)\n\n            for noSpecie in \
range(self.noSpeciesStep3):\n                Label(reactionsFrame, text=\"R \
%s\" % self.speciesReact[noSpecie].get(),bg=\"white\").grid(\n                \
    row=0, column=(self.noSpeciesStep3 + noSpecie))\n\n            \
Label(reactionsFrame, text=\"==>\", bg=\"white\").grid(row=0, \
column=(self.noSpeciesStep3 * 2))\n\n            for noSpecie in \
range(self.noSpeciesStep3):\n                Label(reactionsFrame, text=\"L \
%s\" % self.speciesReact[noSpecie].get(), bg=\"white\").grid(\n               \
     row=0, column=(noSpecie + (self.noSpeciesStep3 * 2) + 1))\n\n            \
for noSpecie in range(self.noSpeciesStep3):\n                \
Label(reactionsFrame, text=\"R %s\" % self.speciesReact[noSpecie].get(), \
bg=\"white\").grid(\n                    row=0, column=(noSpecie + \
self.noSpeciesStep3 + (self.noSpeciesStep3 * 2) + 1))\n\n            for \
noChemReact in range(self.noChemReacts):\n                \
self.chemReact.append([]);\n                for noSpecie in \
range(self.noSpeciesStep3 * 2):\n                    \
self.chemReact[noChemReact].append(Entry(reactionsFrame, width=5))\n          \
          self.chemReact[noChemReact][noSpecie].grid(\n                       \
 row=noChemReact + 1, column=noSpecie, padx=5, pady=5)\n\n            for \
noChemReact in range(self.noChemReacts):\n                for noSpecie in \
range(self.noSpeciesStep3 * 2):\n                    \
self.chemReact[noChemReact].append(Entry(reactionsFrame, width=5))\n          \
          self.chemReact[noChemReact][noSpecie + (self.noSpeciesStep3 * \
2)].grid(\n                        row=(noChemReact) + 1, column=(noSpecie + \
(self.noSpeciesStep3 * 2)) + 1, padx=5, pady=5)\n\n            \
reactionsFrame.grid(sticky='nesw', pady=15, padx=15, row=1)\n            \
frame.rowconfigure(1, weight=1)\n            frame.columnconfigure(0, \
weight=1)\n\n    def makeChemEqMatrix(self):\n        for i in \
range(len(self.chemReact)):\n            matrixReact.append([])\n            \
for j in range(len(self.chemReact[i])):\n                \
matrixReact[i].append(self.chemReact[i][j].get())\n        n=len(matrixReact)\
\n        for k in range(n):\n            matrixReact.append(matrixReact[k])\n\
\nroot = Tk()\nroot.minsize(600, 250)\nroot.title(\"ODE CHEM\")\napp = \
chemReactNumber(master=root)\napp.mainloop()\nroot.destroy()\nmatrixReact"}, {
                    "globals", "{}"}, {"opts", "{'constants': {}}"}, {
                    "result", "<ast.Expr object at 0x7f48a4486b50>"}, {
                    "expressions", 
                    "[<ast.ImportFrom object at 0x7f48a44f0d90>, <ast.Assign \
object at 0x7f48a44f0d00>, <ast.ClassDef object at 0x7f48a44f0c70>, \
<ast.Assign object at 0x7f48a4486520>, <ast.Expr object at 0x7f48a44865e0>, \
<ast.Expr object at 0x7f48a4486730>, <ast.Assign object at 0x7f48a4486850>, \
<ast.Expr object at 0x7f48a4486970>, <ast.Expr object at 0x7f48a4486a60>]"}, {
                    "last_expr", "<ast.Expr object at 0x7f48a4486b50>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"<module>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"<module>\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 166.              \
matrixReact.append(matrixReact[k])\""}, {"\" 167.  \""}, {
                    "\" 168.  root = Tk()\""}, {
                    "\" 169.  root.minsize(600, 250)\""}, {
                    "\" 170.  root.title(\\\"ODE CHEM\\\")\""}, {
                    "\" 171.  app = chemReactNumber(master=root)\""}, {
                    "\" 172.  app.mainloop()\""}, {
                    ItemBox[
                    "\" 173.  root.destroy()\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 174.  matrixReact\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"TclError\"", 
                    "\"<class '_tkinter.TclError'>\""}, {"\"NO\"", "\"0\""}, {
                    "\"FALSE\"", "\"0\""}, {"\"OFF\"", "\"0\""}, {
                    "\"YES\"", "\"1\""}, {"\"TRUE\"", "\"1\""}, {
                    "\"ON\"", "\"1\""}, {"\"N\"", "\"n\""}, {"\"S\"", 
                    "\"s\""}, {"\"W\"", "\"w\""}, {"\"E\"", "\"e\""}, {
                    "\"NW\"", "\"nw\""}, {"\"SW\"", "\"sw\""}, {"\"NE\"", 
                    "\"ne\""}, {"\"SE\"", "\"se\""}, {"\"NS\"", "\"ns\""}, {
                    "\"EW\"", "\"ew\""}, {"\"NSEW\"", "\"nsew\""}, {
                    "\"CENTER\"", "\"center\""}, {"\"NONE\"", "\"none\""}, {
                    "\"X\"", "\"x\""}, {"\"Y\"", "\"y\""}, {"\"BOTH\"", 
                    "\"both\""}, {"\"LEFT\"", "\"left\""}, {"\"TOP\"", 
                    "\"top\""}, {"\"RIGHT\"", "\"right\""}, {"\"BOTTOM\"", 
                    "\"bottom\""}, {"\"RAISED\"", "\"raised\""}, {
                    "\"SUNKEN\"", "\"sunken\""}, {"\"FLAT\"", "\"flat\""}, {
                    "\"RIDGE\"", "\"ridge\""}, {"\"GROOVE\"", "\"groove\""}, {
                    "\"SOLID\"", "\"solid\""}, {"\"HORIZONTAL\"", 
                    "\"horizontal\""}, {"\"VERTICAL\"", "\"vertical\""}, {
                    "\"NUMERIC\"", "\"numeric\""}, {"\"CHAR\"", "\"char\""}, {
                    "\"WORD\"", "\"word\""}, {"\"BASELINE\"", 
                    "\"baseline\""}, {"\"INSIDE\"", "\"inside\""}, {
                    "\"OUTSIDE\"", "\"outside\""}, {"\"SEL\"", "\"sel\""}, {
                    "\"SEL_FIRST\"", "\"sel.first\""}, {"\"SEL_LAST\"", 
                    "\"sel.last\""}, {"\"END\"", "\"end\""}, {"\"INSERT\"", 
                    "\"insert\""}, {"\"CURRENT\"", "\"current\""}, {
                    "\"ANCHOR\"", "\"anchor\""}, {"\"ALL\"", "\"all\""}, {
                    "\"NORMAL\"", "\"normal\""}, {"\"DISABLED\"", 
                    "\"disabled\""}, {"\"ACTIVE\"", "\"active\""}, {
                    "\"HIDDEN\"", "\"hidden\""}, {"\"CASCADE\"", 
                    "\"cascade\""}, {"\"CHECKBUTTON\"", "\"checkbutton\""}, {
                    "\"COMMAND\"", "\"command\""}, {"\"RADIOBUTTON\"", 
                    "\"radiobutton\""}, {"\"SEPARATOR\"", "\"separator\""}, {
                    "\"SINGLE\"", "\"single\""}, {"\"BROWSE\"", 
                    "\"browse\""}, {"\"MULTIPLE\"", "\"multiple\""}, {
                    "\"EXTENDED\"", "\"extended\""}, {"\"DOTBOX\"", 
                    "\"dotbox\""}, {"\"UNDERLINE\"", "\"underline\""}, {
                    "\"PIESLICE\"", "\"pieslice\""}, {"\"CHORD\"", 
                    "\"chord\""}, {"\"ARC\"", "\"arc\""}, {"\"FIRST\"", 
                    "\"first\""}, {"\"LAST\"", "\"last\""}, {"\"BUTT\"", 
                    "\"butt\""}, {"\"PROJECTING\"", "\"projecting\""}, {
                    "\"ROUND\"", "\"round\""}, {"\"BEVEL\"", "\"bevel\""}, {
                    "\"MITER\"", "\"miter\""}, {"\"MOVETO\"", "\"moveto\""}, {
                    "\"SCROLL\"", "\"scroll\""}, {"\"UNITS\"", "\"units\""}, {
                    "\"PAGES\"", "\"pages\""}, {"\"TkVersion\"", "\"8.6\""}, {
                    "\"TclVersion\"", "\"8.6\""}, {"\"READABLE\"", "\"2\""}, {
                    "\"WRITABLE\"", "\"4\""}, {"\"EXCEPTION\"", "\"8\""}, {
                    "\"EventType\"", "\"<enum 'EventType'>\""}, {
                    "\"Event\"", "\"<class 'tkinter.Event'>\""}, {
                    "\"NoDefaultRoot\"", 
                    "\"<function NoDefaultRoot at 0x7f48a59ab9d0>\""}, {
                    "\"Variable\"", "\"<class 'tkinter.Variable'>\""}, {
                    "\"StringVar\"", "\"<class 'tkinter.StringVar'>\""}, {
                    "\"IntVar\"", "\"<class 'tkinter.IntVar'>\""}, {
                    "\"DoubleVar\"", "\"<class 'tkinter.DoubleVar'>\""}, {
                    "\"BooleanVar\"", "\"<class 'tkinter.BooleanVar'>\""}, {
                    "\"mainloop\"", 
                    "\"<function mainloop at 0x7f48a59abca0>\""}, {
                    "\"getint\"", "\"<class 'int'>\""}, {"\"getdouble\"", 
                    "\"<class 'float'>\""}, {"\"getboolean\"", 
                    "\"<function getboolean at 0x7f48a59d19d0>\""}, {
                    "\"Misc\"", 
                    "\"<class 'tkinter.Misc'>\""}, {"\"CallWrapper\"", 
                    "\"<class 'tkinter.CallWrapper'>\""}, {"\"XView\"", 
                    "\"<class 'tkinter.XView'>\""}, {"\"YView\"", 
                    "\"<class 'tkinter.YView'>\""}, {"\"Wm\"", 
                    "\"<class 'tkinter.Wm'>\""}, {"\"Tk\"", 
                    "\"<class 'tkinter.Tk'>\""}, {"\"Tcl\"", 
                    "\"<function Tcl at 0x7f48a59d1a60>\""}, {"\"Pack\"", 
                    "\"<class 'tkinter.Pack'>\""}, {"\"Place\"", 
                    "\"<class 'tkinter.Place'>\""}, {"\"Grid\"", 
                    "\"<class 'tkinter.Grid'>\""}, {"\"BaseWidget\"", 
                    "\"<class 'tkinter.BaseWidget'>\""}, {"\"Widget\"", 
                    "\"<class 'tkinter.Widget'>\""}, {"\"Toplevel\"", 
                    "\"<class 'tkinter.Toplevel'>\""}, {"\"Button\"", 
                    "\"<class 'tkinter.Button'>\""}, {"\"Canvas\"", 
                    "\"<class 'tkinter.Canvas'>\""}, {"\"Checkbutton\"", 
                    "\"<class 'tkinter.Checkbutton'>\""}, {"\"Entry\"", 
                    "\"<class 'tkinter.Entry'>\""}, {"\"Frame\"", 
                    "\"<class 'tkinter.Frame'>\""}, {"\"Label\"", 
                    "\"<class 'tkinter.Label'>\""}, {"\"Listbox\"", 
                    "\"<class 'tkinter.Listbox'>\""}, {"\"Menu\"", 
                    "\"<class 'tkinter.Menu'>\""}, {"\"Menubutton\"", 
                    "\"<class 'tkinter.Menubutton'>\""}, {"\"Message\"", 
                    "\"<class 'tkinter.Message'>\""}, {"\"Radiobutton\"", 
                    "\"<class 'tkinter.Radiobutton'>\""}, {"\"Scale\"", 
                    "\"<class 'tkinter.Scale'>\""}, {"\"Scrollbar\"", 
                    "\"<class 'tkinter.Scrollbar'>\""}, {"\"Text\"", 
                    "\"<class 'tkinter.Text'>\""}, {"\"OptionMenu\"", 
                    "\"<class 'tkinter.OptionMenu'>\""}, {"\"Image\"", 
                    "\"<class 'tkinter.Image'>\""}, {"\"PhotoImage\"", 
                    "\"<class 'tkinter.PhotoImage'>\""}, {"\"BitmapImage\"", 
                    "\"<class 'tkinter.BitmapImage'>\""}, {"\"image_names\"", 
                    "\"<function image_names at 0x7f48a5079940>\""}, {
                    "\"image_types\"", 
                    "\"<function image_types at 0x7f48a508b280>\""}, {
                    "\"Spinbox\"", "\"<class 'tkinter.Spinbox'>\""}, {
                    "\"LabelFrame\"", "\"<class 'tkinter.LabelFrame'>\""}, {
                    "\"PanedWindow\"", "\"<class 'tkinter.PanedWindow'>\""}, {
                    "\"matrixReact\"", "\"[]\""}, {"\"chemReactNumber\"", 
                    "\"<class 'chemReactNumber'>\""}, {"\"root\"", "\".\""}, {
                    "\"app\"", "\".!chemreactnumber\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"TclError", 
                    "<class '_tkinter.TclError'>"}, {"NO", "0"}, {
                    "FALSE", "0"}, {"OFF", "0"}, {"YES", "1"}, {
                    "TRUE", "1"}, {"ON", "1"}, {"N", "n"}, {"S", "s"}, {
                    "W", "w"}, {"E", "e"}, {"NW", "nw"}, {"SW", "sw"}, {
                    "NE", "ne"}, {"SE", "se"}, {"NS", "ns"}, {"EW", "ew"}, {
                    "NSEW", "nsew"}, {"CENTER", "center"}, {"NONE", "none"}, {
                    "X", "x"}, {"Y", "y"}, {"BOTH", "both"}, {
                    "LEFT", "left"}, {"TOP", "top"}, {"RIGHT", "right"}, {
                    "BOTTOM", "bottom"}, {"RAISED", "raised"}, {
                    "SUNKEN", "sunken"}, {"FLAT", "flat"}, {
                    "RIDGE", "ridge"}, {"GROOVE", "groove"}, {
                    "SOLID", "solid"}, {"HORIZONTAL", "horizontal"}, {
                    "VERTICAL", "vertical"}, {"NUMERIC", "numeric"}, {
                    "CHAR", "char"}, {"WORD", "word"}, {"BASELINE", 
                    "baseline"}, {"INSIDE", "inside"}, {"OUTSIDE", 
                    "outside"}, {"SEL", "sel"}, {"SEL_FIRST", "sel.first"}, {
                    "SEL_LAST", "sel.last"}, {"END", "end"}, {
                    "INSERT", "insert"}, {"CURRENT", "current"}, {
                    "ANCHOR", "anchor"}, {"ALL", "all"}, {
                    "NORMAL", "normal"}, {"DISABLED", "disabled"}, {
                    "ACTIVE", "active"}, {"HIDDEN", "hidden"}, {
                    "CASCADE", "cascade"}, {"CHECKBUTTON", "checkbutton"}, {
                    "COMMAND", "command"}, {"RADIOBUTTON", "radiobutton"}, {
                    "SEPARATOR", "separator"}, {"SINGLE", "single"}, {
                    "BROWSE", "browse"}, {"MULTIPLE", "multiple"}, {
                    "EXTENDED", "extended"}, {"DOTBOX", "dotbox"}, {
                    "UNDERLINE", "underline"}, {"PIESLICE", "pieslice"}, {
                    "CHORD", "chord"}, {"ARC", "arc"}, {"FIRST", "first"}, {
                    "LAST", "last"}, {"BUTT", "butt"}, {"PROJECTING", 
                    "projecting"}, {"ROUND", "round"}, {"BEVEL", "bevel"}, {
                    "MITER", "miter"}, {"MOVETO", "moveto"}, {
                    "SCROLL", "scroll"}, {"UNITS", "units"}, {
                    "PAGES", "pages"}, {"TkVersion", "8.6"}, {
                    "TclVersion", "8.6"}, {"READABLE", "2"}, {
                    "WRITABLE", "4"}, {"EXCEPTION", "8"}, {
                    "EventType", "<enum 'EventType'>"}, {"Event", 
                    "<class 'tkinter.Event'>"}, {"NoDefaultRoot", 
                    "<function NoDefaultRoot at 0x7f48a59ab9d0>"}, {
                    "Variable", "<class 'tkinter.Variable'>"}, {
                    "StringVar", "<class 'tkinter.StringVar'>"}, {
                    "IntVar", "<class 'tkinter.IntVar'>"}, {
                    "DoubleVar", "<class 'tkinter.DoubleVar'>"}, {
                    "BooleanVar", "<class 'tkinter.BooleanVar'>"}, {
                    "mainloop", "<function mainloop at 0x7f48a59abca0>"}, {
                    "getint", "<class 'int'>"}, {"getdouble", 
                    "<class 'float'>"}, {"getboolean", 
                    "<function getboolean at 0x7f48a59d19d0>"}, {
                    "Misc", "<class 'tkinter.Misc'>"}, {"CallWrapper", 
                    "<class 'tkinter.CallWrapper'>"}, {"XView", 
                    "<class 'tkinter.XView'>"}, {"YView", 
                    "<class 'tkinter.YView'>"}, {"Wm", 
                    "<class 'tkinter.Wm'>"}, {"Tk", "<class 'tkinter.Tk'>"}, {
                    "Tcl", "<function Tcl at 0x7f48a59d1a60>"}, {
                    "Pack", "<class 'tkinter.Pack'>"}, {"Place", 
                    "<class 'tkinter.Place'>"}, {"Grid", 
                    "<class 'tkinter.Grid'>"}, {"BaseWidget", 
                    "<class 'tkinter.BaseWidget'>"}, {"Widget", 
                    "<class 'tkinter.Widget'>"}, {"Toplevel", 
                    "<class 'tkinter.Toplevel'>"}, {"Button", 
                    "<class 'tkinter.Button'>"}, {"Canvas", 
                    "<class 'tkinter.Canvas'>"}, {"Checkbutton", 
                    "<class 'tkinter.Checkbutton'>"}, {"Entry", 
                    "<class 'tkinter.Entry'>"}, {"Frame", 
                    "<class 'tkinter.Frame'>"}, {"Label", 
                    "<class 'tkinter.Label'>"}, {"Listbox", 
                    "<class 'tkinter.Listbox'>"}, {"Menu", 
                    "<class 'tkinter.Menu'>"}, {"Menubutton", 
                    "<class 'tkinter.Menubutton'>"}, {"Message", 
                    "<class 'tkinter.Message'>"}, {"Radiobutton", 
                    "<class 'tkinter.Radiobutton'>"}, {"Scale", 
                    "<class 'tkinter.Scale'>"}, {"Scrollbar", 
                    "<class 'tkinter.Scrollbar'>"}, {"Text", 
                    "<class 'tkinter.Text'>"}, {"OptionMenu", 
                    "<class 'tkinter.OptionMenu'>"}, {"Image", 
                    "<class 'tkinter.Image'>"}, {"PhotoImage", 
                    "<class 'tkinter.PhotoImage'>"}, {"BitmapImage", 
                    "<class 'tkinter.BitmapImage'>"}, {"image_names", 
                    "<function image_names at 0x7f48a5079940>"}, {
                    "image_types", 
                    "<function image_types at 0x7f48a508b280>"}, {
                    "Spinbox", "<class 'tkinter.Spinbox'>"}, {
                    "LabelFrame", "<class 'tkinter.LabelFrame'>"}, {
                    "PanedWindow", "<class 'tkinter.PanedWindow'>"}, {
                    "matrixReact", "[]"}, {"chemReactNumber", 
                    "<class 'chemReactNumber'>"}, {"root", "."}, {
                    "app", ".!chemreactnumber"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"<module>", 
                    Column[{
                    
                    Column[{
                    " 166.              matrixReact.append(matrixReact[k])", 
                    " 167.  ", " 168.  root = Tk()", 
                    " 169.  root.minsize(600, 250)", 
                    " 170.  root.title(\"ODE CHEM\")", 
                    " 171.  app = chemReactNumber(master=root)", 
                    " 172.  app.mainloop()", 
                    Item[" 173.  root.destroy()", Background -> LightYellow], 
                    " 174.  matrixReact"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"TclError", 
                    "<class '_tkinter.TclError'>"}, {"NO", "0"}, {
                    "FALSE", "0"}, {"OFF", "0"}, {"YES", "1"}, {
                    "TRUE", "1"}, {"ON", "1"}, {"N", "n"}, {"S", "s"}, {
                    "W", "w"}, {"E", "e"}, {"NW", "nw"}, {"SW", "sw"}, {
                    "NE", "ne"}, {"SE", "se"}, {"NS", "ns"}, {"EW", "ew"}, {
                    "NSEW", "nsew"}, {"CENTER", "center"}, {"NONE", "none"}, {
                    "X", "x"}, {"Y", "y"}, {"BOTH", "both"}, {
                    "LEFT", "left"}, {"TOP", "top"}, {"RIGHT", "right"}, {
                    "BOTTOM", "bottom"}, {"RAISED", "raised"}, {
                    "SUNKEN", "sunken"}, {"FLAT", "flat"}, {
                    "RIDGE", "ridge"}, {"GROOVE", "groove"}, {
                    "SOLID", "solid"}, {"HORIZONTAL", "horizontal"}, {
                    "VERTICAL", "vertical"}, {"NUMERIC", "numeric"}, {
                    "CHAR", "char"}, {"WORD", "word"}, {
                    "BASELINE", "baseline"}, {"INSIDE", "inside"}, {
                    "OUTSIDE", "outside"}, {"SEL", "sel"}, {
                    "SEL_FIRST", "sel.first"}, {"SEL_LAST", "sel.last"}, {
                    "END", "end"}, {"INSERT", "insert"}, {
                    "CURRENT", "current"}, {"ANCHOR", "anchor"}, {
                    "ALL", "all"}, {"NORMAL", "normal"}, {
                    "DISABLED", "disabled"}, {"ACTIVE", "active"}, {
                    "HIDDEN", "hidden"}, {"CASCADE", "cascade"}, {
                    "CHECKBUTTON", "checkbutton"}, {"COMMAND", "command"}, {
                    "RADIOBUTTON", "radiobutton"}, {
                    "SEPARATOR", "separator"}, {"SINGLE", "single"}, {
                    "BROWSE", "browse"}, {"MULTIPLE", "multiple"}, {
                    "EXTENDED", "extended"}, {"DOTBOX", "dotbox"}, {
                    "UNDERLINE", "underline"}, {"PIESLICE", "pieslice"}, {
                    "CHORD", "chord"}, {"ARC", "arc"}, {"FIRST", "first"}, {
                    "LAST", "last"}, {"BUTT", "butt"}, {
                    "PROJECTING", "projecting"}, {"ROUND", "round"}, {
                    "BEVEL", "bevel"}, {"MITER", "miter"}, {
                    "MOVETO", "moveto"}, {"SCROLL", "scroll"}, {
                    "UNITS", "units"}, {"PAGES", "pages"}, {
                    "TkVersion", "8.6"}, {"TclVersion", "8.6"}, {
                    "READABLE", "2"}, {"WRITABLE", "4"}, {"EXCEPTION", "8"}, {
                    "EventType", "<enum 'EventType'>"}, {
                    "Event", "<class 'tkinter.Event'>"}, {
                    "NoDefaultRoot", 
                    "<function NoDefaultRoot at 0x7f48a59ab9d0>"}, {
                    "Variable", "<class 'tkinter.Variable'>"}, {
                    "StringVar", "<class 'tkinter.StringVar'>"}, {
                    "IntVar", "<class 'tkinter.IntVar'>"}, {
                    "DoubleVar", "<class 'tkinter.DoubleVar'>"}, {
                    "BooleanVar", "<class 'tkinter.BooleanVar'>"}, {
                    "mainloop", "<function mainloop at 0x7f48a59abca0>"}, {
                    "getint", "<class 'int'>"}, {
                    "getdouble", "<class 'float'>"}, {
                    "getboolean", 
                    "<function getboolean at 0x7f48a59d19d0>"}, {
                    "Misc", "<class 'tkinter.Misc'>"}, {
                    "CallWrapper", "<class 'tkinter.CallWrapper'>"}, {
                    "XView", "<class 'tkinter.XView'>"}, {
                    "YView", "<class 'tkinter.YView'>"}, {
                    "Wm", "<class 'tkinter.Wm'>"}, {
                    "Tk", "<class 'tkinter.Tk'>"}, {
                    "Tcl", "<function Tcl at 0x7f48a59d1a60>"}, {
                    "Pack", "<class 'tkinter.Pack'>"}, {
                    "Place", "<class 'tkinter.Place'>"}, {
                    "Grid", "<class 'tkinter.Grid'>"}, {
                    "BaseWidget", "<class 'tkinter.BaseWidget'>"}, {
                    "Widget", "<class 'tkinter.Widget'>"}, {
                    "Toplevel", "<class 'tkinter.Toplevel'>"}, {
                    "Button", "<class 'tkinter.Button'>"}, {
                    "Canvas", "<class 'tkinter.Canvas'>"}, {
                    "Checkbutton", "<class 'tkinter.Checkbutton'>"}, {
                    "Entry", "<class 'tkinter.Entry'>"}, {
                    "Frame", "<class 'tkinter.Frame'>"}, {
                    "Label", "<class 'tkinter.Label'>"}, {
                    "Listbox", "<class 'tkinter.Listbox'>"}, {
                    "Menu", "<class 'tkinter.Menu'>"}, {
                    "Menubutton", "<class 'tkinter.Menubutton'>"}, {
                    "Message", "<class 'tkinter.Message'>"}, {
                    "Radiobutton", "<class 'tkinter.Radiobutton'>"}, {
                    "Scale", "<class 'tkinter.Scale'>"}, {
                    "Scrollbar", "<class 'tkinter.Scrollbar'>"}, {
                    "Text", "<class 'tkinter.Text'>"}, {
                    "OptionMenu", "<class 'tkinter.OptionMenu'>"}, {
                    "Image", "<class 'tkinter.Image'>"}, {
                    "PhotoImage", "<class 'tkinter.PhotoImage'>"}, {
                    "BitmapImage", "<class 'tkinter.BitmapImage'>"}, {
                    "image_names", 
                    "<function image_names at 0x7f48a5079940>"}, {
                    "image_types", 
                    "<function image_types at 0x7f48a508b280>"}, {
                    "Spinbox", "<class 'tkinter.Spinbox'>"}, {
                    "LabelFrame", "<class 'tkinter.LabelFrame'>"}, {
                    "PanedWindow", "<class 'tkinter.PanedWindow'>"}, {
                    "matrixReact", "[]"}, {"chemReactNumber", 
                    "<class 'chemReactNumber'>"}, {"root", "."}, {
                    "app", ".!chemreactnumber"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox["\"/usr/lib/python3.9/tkinter/__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ["/usr/lib/python3.9/tkinter/__init__.py"], 
                    SystemOpen["/usr/lib/python3.9/tkinter/__init__.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"destroy\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox["\"/usr/lib/python3.9/tkinter/__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ["/usr/lib/python3.9/tkinter/__init__.py"], 
                    SystemOpen["/usr/lib/python3.9/tkinter/__init__.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"destroy\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"2305.              _default_root = self\""}, {
                    "\"2306.          self.protocol(\\\"WM_DELETE_WINDOW\\\", \
self.destroy)\""}, {"\"2307.  \""}, {"\"2308.      def destroy(self):\""}, {
                    "\"2309.          \\\"\\\"\\\"Destroy this and all \
descendants widgets. This will\""}, {
                    "\"2310.          end the application of this Tcl \
interpreter.\\\"\\\"\\\"\""}, {
                    "\"2311.          for c in list(self.children.values()): \
c.destroy()\""}, {
                    ItemBox[
                    "\"2312.          self.tk.call('destroy', self._w)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\"2313.          Misc.destroy(self)\""}, {
                    "\"2314.          global _default_root\""}, {
                    "\"2315.          if _support_default_root and \
_default_root is self:\""}, {"\"2316.              _default_root = None\""}, {
                    "\"2317.  \""}, {
                    "\"2318.      def readprofile(self, baseName, className):\
\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", "\".\""}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", "."}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style["/usr/lib/python3.9/tkinter/__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ["/usr/lib/python3.9/tkinter/__init__.py"], 
                    SystemOpen["/usr/lib/python3.9/tkinter/__init__.py"]], 
                    Appearance -> "Frameless"], " in ", "destroy"}], 
                    Column[{
                    Column[{"2305.              _default_root = self", 
                    "2306.          self.protocol(\"WM_DELETE_WINDOW\", \
self.destroy)", "2307.  ", "2308.      def destroy(self):", 
                    "2309.          \"\"\"Destroy this and all descendants \
widgets. This will", 
                    "2310.          end the application of this Tcl \
interpreter.\"\"\"", 
                    "2311.          for c in list(self.children.values()): \
c.destroy()", 
                    Item["2312.          self.tk.call('destroy', self._w)", 
                    Background -> LightYellow], 
                    "2313.          Misc.destroy(self)", 
                    "2314.          global _default_root", 
                    "2315.          if _support_default_root and \
_default_root is self:", "2316.              _default_root = None", "2317.  ",
                     "2318.      def readprofile(self, baseName, \
className):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", "."}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Row[{"TclError", " ", 
                    "can't invoke \"destroy\" command: application has been \
destroyed"}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{"  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", 
                    "  20.      __traceback_hidden_variables__ = True", 
                    "  21.  ", "  22.      try:", 
                    Item[
                    "  23.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  24.      except Exception as export_exception:", 
                    "  25.          try:", "  26.              try:", 
                    "  27.  ", 
                    "  28.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  29.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "handle_message"}], 
                    Column[{
                    
                    Column[{" 171.  ", " 172.  ", 
                    " 173.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):", " 174.  ", 
                    " 175.      __traceback_hidden_variables__ = True", 
                    " 176.  ", 
                    " 177.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Item[
                    " 178.      result = evaluate_message(**message)", 
                    Background -> LightYellow], " 179.  ", 
                    " 180.      sys.stdout.flush()", 
                    " 181.      return result", " 182.  ", " 183.  ", 
                    " 184.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "evaluate_message"}], 
                    
                    Column[{
                    
                    Column[{
                    " 152.  def evaluate_message(input=None, \
return_type=None, args=None, **opts):", " 153.  ", 
                    " 154.      __traceback_hidden_variables__ = True", 
                    " 155.  ", " 156.      result = None", " 157.  ", 
                    " 158.      if isinstance(input, six.string_types):", 
                    Item[
                    " 159.          result = execute_from_string(input, \
**opts)", Background -> LightYellow], " 160.  ", 
                    " 161.      if isinstance(args, (list, tuple)):", 
                    " 162.          # then we have a function call to do", 
                    " 163.          # first get the function object we need \
to call", " 164.          result = result(*args)", " 165.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", 
                    "execute_from_string"}], 
                    Column[{
                    
                    Column[{"  81.  ", 
                    "  82.      last_expr = last(expressions)", "  83.  ", 
                    "  84.      if isinstance(last_expr, ast.Expr):", 
                    "  85.          result = expressions.pop(-1)", "  86.  ", 
                    "  87.      if expressions:", 
                    Item[
                    "  88.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", Background -> LightYellow], "  89.  ", 
                    "  90.      if result:", 
                    "  91.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", "  92.  ", 
                    "  93.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", "  94.          return env[last_expr.name]"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "code", 
                    "from tkinter import *\n\nmatrixReact = []\n\n\nclass \
chemReactNumber(Frame):\n    numberChemReact = 0\n    speciesReact = []\n    \
chemReact = []\n    step = 0\n    chemReactFrameIsFilled = False\n    \
speciesFrameIsFilled = False\n    reactionsFrameIsFilled = False\n    \
noSpeciesStep2 = 0\n    noSpeciesStep3 = 0\n    noChemReacts = 0\n\n    def \
__init__(self, master=None):\n        super().__init__(master)\n        \
master.columnconfigure(0, weight=1)\n        master.columnconfigure(1, \
weight=1)\n        master.rowconfigure(0, weight=10)\n        \
master.rowconfigure(1, weight=1)\n        self.master = master\n        \
self.start()\n\n    def start(self):\n        self.startFrames()\n        \
self.showStep(self.step)\n\n    def startFrames(self):\n        \
self.noChemReactFrame = Frame(root, bg=\"white\")\n        self.speciesFrame \
= Frame(root, bg=\"white\")\n        self.reactionsFrame = Frame(root, \
bg=\"white\")\n        self.frameNav = Frame(root);\n\n    def showStep(self, \
step):\n        self.noChemReactFrame.grid_remove()\n        \
self.speciesFrame.grid_remove()\n        self.reactionsFrame.grid_remove()\n  \
      self.frameNav.grid_remove()\n\n        if (step == 0):\n            \
self.noChemReactFrame.grid(sticky=\"nsew\", row=0, columnspan=2)\n            \
if not self.chemReactFrameIsFilled:\n                \
self.fillChemReactFrame(self.noChemReactFrame)\n                \
self.chemReactFrameIsFilled = True\n\n        elif (step == 1):\n            \
self.speciesFrame.grid(sticky=\"nsew\", row=0, columnspan=2)\n            \
self.fillSpeciesFrame(self.speciesFrame)\n\n        elif (step == 2):\n       \
     self.reactionsFrame.grid(sticky=\"nsew\", row=0, columnspan=2)\n         \
   self.fillChemReactionsFrame(self.reactionsFrame)\n            \
self.reactionsFrameIsFilled = True\n\n        else:\n            \
self.makeChemEqMatrix()\n            root.quit()\n\n        \
self.fillFrameNav(self.frameNav)\n        self.frameNav.grid(row=1)\n\n    \
def fillFrameNav(self, frame):\n        frame.grid()\n        Button(root, \
text='Back', command=self.moveBackStep).grid(\n            row=1, column=0, \
sticky='nesw', pady=10, padx=10)\n        Button(root, text='Next', \
command=self.moveNextStep).grid(\n            row=1, column=1, sticky='nesw', \
pady=10, padx=10)\n\n    def moveNextStep(self):\n        self.step = \
self.step + 1\n        self.showStep(self.step)\n\n    def \
moveBackStep(self):\n        self.step = self.step - 1\n        \
self.showStep(self.step)\n\n    def fillChemReactFrame(self, frame):\n        \
inputFrame = Frame(frame, bg=\"white\")\n        textField1 = \
Frame(inputFrame, bg=\"white\")\n        textField2 = Frame(inputFrame, \
bg=\"white\")\n        Label(textField1, text=\"Number of Species:\", \
bg=\"white\").grid(sticky='nesw', row=0)\n        self.numberSpecies = \
Entry(textField1)\n        self.numberSpecies.grid(sticky='nesw', row=1)\n    \
    Label(textField2, text=\"Number of Chem reactions:\", \
bg=\"white\").grid(row=2)\n        self.numberChemReact = Entry(textField2)\n \
       self.numberChemReact.grid(row=3, sticky='nesw')\n        \
frame.columnconfigure(0, weight=1)\n        inputFrame.grid(pady=10)\n        \
textField1.grid(pady=15, sticky='nesw')\n        textField2.grid(pady=15, \
sticky='nesw')\n\n    def fillSpeciesFrame(self, frame):\n        if \
(self.noSpeciesStep2 != int(self.numberSpecies.get())):\n            \
self.noSpeciesStep2 = int(self.numberSpecies.get())\n            frame.grid()\
\n            Label(frame, text=\"Species names\", bg=\"white\").grid(row=0, \
pady=8)\n            frameSpecies = Frame(frame, bg=\"white\")\n            \
rowSpecie = 1\n            for noSpecie in range(self.noSpeciesStep2):\n      \
          if (noSpecie % 3 == 0):\n                    rowSpecie = rowSpecie \
+ 1\n                    columnSpecies = 0\n                \
Label(frameSpecies, text=\"Species #%i:\" % (noSpecie + 1), \
bg=\"white\").grid(\n                    row=rowSpecie, column=columnSpecies \
* 2)\n                self.speciesReact.append(Entry(frameSpecies, width=10))\
\n                self.speciesReact[noSpecie].grid(\n                    \
row=rowSpecie, column=(columnSpecies * 2) + 1, padx=5, pady=5)\n              \
  columnSpecies = columnSpecies + 1\n            \
frameSpecies.grid(sticky='nesw', pady=15, padx=15, row=1)\n            \
frame.columnconfigure(0, weight=1)\n            \
self.numberChemReact.grid(row=1)\n\n    def fillChemReactionsFrame(self, \
frame):\n        if (self.noSpeciesStep3 != int(self.numberSpecies.get()) or\n\
                self.noChemReacts != int(self.numberChemReact.get())):\n      \
      self.noSpeciesStep3 = int(self.numberSpecies.get())\n            \
self.noChemReacts = int(self.numberChemReact.get())\n            Label(frame, \
text=\"Reactions\", bg=\"white\").grid(pady=8, row=0)\n            \
reactionsFrame = Frame(frame, bg=\"white\")\n\n            for noSpecie in \
range(self.noSpeciesStep3):\n                Label(reactionsFrame, text=\"L \
%s\" % self.speciesReact[noSpecie].get(),bg=\"white\").grid(\n                \
    row=0, column=noSpecie)\n\n            for noSpecie in \
range(self.noSpeciesStep3):\n                Label(reactionsFrame, text=\"R \
%s\" % self.speciesReact[noSpecie].get(),bg=\"white\").grid(\n                \
    row=0, column=(self.noSpeciesStep3 + noSpecie))\n\n            \
Label(reactionsFrame, text=\"==>\", bg=\"white\").grid(row=0, \
column=(self.noSpeciesStep3 * 2))\n\n            for noSpecie in \
range(self.noSpeciesStep3):\n                Label(reactionsFrame, text=\"L \
%s\" % self.speciesReact[noSpecie].get(), bg=\"white\").grid(\n               \
     row=0, column=(noSpecie + (self.noSpeciesStep3 * 2) + 1))\n\n            \
for noSpecie in range(self.noSpeciesStep3):\n                \
Label(reactionsFrame, text=\"R %s\" % self.speciesReact[noSpecie].get(), \
bg=\"white\").grid(\n                    row=0, column=(noSpecie + \
self.noSpeciesStep3 + (self.noSpeciesStep3 * 2) + 1))\n\n            for \
noChemReact in range(self.noChemReacts):\n                \
self.chemReact.append([]);\n                for noSpecie in \
range(self.noSpeciesStep3 * 2):\n                    \
self.chemReact[noChemReact].append(Entry(reactionsFrame, width=5))\n          \
          self.chemReact[noChemReact][noSpecie].grid(\n                       \
 row=noChemReact + 1, column=noSpecie, padx=5, pady=5)\n\n            for \
noChemReact in range(self.noChemReacts):\n                for noSpecie in \
range(self.noSpeciesStep3 * 2):\n                    \
self.chemReact[noChemReact].append(Entry(reactionsFrame, width=5))\n          \
          self.chemReact[noChemReact][noSpecie + (self.noSpeciesStep3 * \
2)].grid(\n                        row=(noChemReact) + 1, column=(noSpecie + \
(self.noSpeciesStep3 * 2)) + 1, padx=5, pady=5)\n\n            \
reactionsFrame.grid(sticky='nesw', pady=15, padx=15, row=1)\n            \
frame.rowconfigure(1, weight=1)\n            frame.columnconfigure(0, \
weight=1)\n\n    def makeChemEqMatrix(self):\n        for i in \
range(len(self.chemReact)):\n            matrixReact.append([])\n            \
for j in range(len(self.chemReact[i])):\n                \
matrixReact[i].append(self.chemReact[i][j].get())\n        n=len(matrixReact)\
\n        for k in range(n):\n            matrixReact.append(matrixReact[k])\n\
\nroot = Tk()\nroot.minsize(600, 250)\nroot.title(\"ODE CHEM\")\napp = \
chemReactNumber(master=root)\napp.mainloop()\nroot.destroy()\nmatrixReact"}, {
                    "globals", "{}"}, {"opts", "{'constants': {}}"}, {
                    "result", "<ast.Expr object at 0x7f48a4486b50>"}, {
                    "expressions", 
                    "[<ast.ImportFrom object at 0x7f48a44f0d90>, <ast.Assign \
object at 0x7f48a44f0d00>, <ast.ClassDef object at 0x7f48a44f0c70>, \
<ast.Assign object at 0x7f48a4486520>, <ast.Expr object at 0x7f48a44865e0>, \
<ast.Expr object at 0x7f48a4486730>, <ast.Assign object at 0x7f48a4486850>, \
<ast.Expr object at 0x7f48a4486970>, <ast.Expr object at 0x7f48a4486a60>]"}, {
                    "last_expr", "<ast.Expr object at 0x7f48a4486b50>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{"<module>", 
                    Column[{
                    
                    Column[{
                    " 166.              matrixReact.append(matrixReact[k])", 
                    " 167.  ", " 168.  root = Tk()", 
                    " 169.  root.minsize(600, 250)", 
                    " 170.  root.title(\"ODE CHEM\")", 
                    " 171.  app = chemReactNumber(master=root)", 
                    " 172.  app.mainloop()", 
                    Item[" 173.  root.destroy()", Background -> LightYellow], 
                    " 174.  matrixReact"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "TclError", "<class '_tkinter.TclError'>"}, {"NO", "0"}, {
                    "FALSE", "0"}, {"OFF", "0"}, {"YES", "1"}, {
                    "TRUE", "1"}, {"ON", "1"}, {"N", "n"}, {"S", "s"}, {
                    "W", "w"}, {"E", "e"}, {"NW", "nw"}, {"SW", "sw"}, {
                    "NE", "ne"}, {"SE", "se"}, {"NS", "ns"}, {"EW", "ew"}, {
                    "NSEW", "nsew"}, {"CENTER", "center"}, {"NONE", "none"}, {
                    "X", "x"}, {"Y", "y"}, {"BOTH", "both"}, {
                    "LEFT", "left"}, {"TOP", "top"}, {"RIGHT", "right"}, {
                    "BOTTOM", "bottom"}, {"RAISED", "raised"}, {
                    "SUNKEN", "sunken"}, {"FLAT", "flat"}, {
                    "RIDGE", "ridge"}, {"GROOVE", "groove"}, {
                    "SOLID", "solid"}, {"HORIZONTAL", "horizontal"}, {
                    "VERTICAL", "vertical"}, {"NUMERIC", "numeric"}, {
                    "CHAR", "char"}, {"WORD", "word"}, {
                    "BASELINE", "baseline"}, {"INSIDE", "inside"}, {
                    "OUTSIDE", "outside"}, {"SEL", "sel"}, {
                    "SEL_FIRST", "sel.first"}, {"SEL_LAST", "sel.last"}, {
                    "END", "end"}, {"INSERT", "insert"}, {
                    "CURRENT", "current"}, {"ANCHOR", "anchor"}, {
                    "ALL", "all"}, {"NORMAL", "normal"}, {
                    "DISABLED", "disabled"}, {"ACTIVE", "active"}, {
                    "HIDDEN", "hidden"}, {"CASCADE", "cascade"}, {
                    "CHECKBUTTON", "checkbutton"}, {"COMMAND", "command"}, {
                    "RADIOBUTTON", "radiobutton"}, {
                    "SEPARATOR", "separator"}, {"SINGLE", "single"}, {
                    "BROWSE", "browse"}, {"MULTIPLE", "multiple"}, {
                    "EXTENDED", "extended"}, {"DOTBOX", "dotbox"}, {
                    "UNDERLINE", "underline"}, {"PIESLICE", "pieslice"}, {
                    "CHORD", "chord"}, {"ARC", "arc"}, {"FIRST", "first"}, {
                    "LAST", "last"}, {"BUTT", "butt"}, {
                    "PROJECTING", "projecting"}, {"ROUND", "round"}, {
                    "BEVEL", "bevel"}, {"MITER", "miter"}, {
                    "MOVETO", "moveto"}, {"SCROLL", "scroll"}, {
                    "UNITS", "units"}, {"PAGES", "pages"}, {
                    "TkVersion", "8.6"}, {"TclVersion", "8.6"}, {
                    "READABLE", "2"}, {"WRITABLE", "4"}, {"EXCEPTION", "8"}, {
                    "EventType", "<enum 'EventType'>"}, {
                    "Event", "<class 'tkinter.Event'>"}, {
                    "NoDefaultRoot", 
                    "<function NoDefaultRoot at 0x7f48a59ab9d0>"}, {
                    "Variable", "<class 'tkinter.Variable'>"}, {
                    "StringVar", "<class 'tkinter.StringVar'>"}, {
                    "IntVar", "<class 'tkinter.IntVar'>"}, {
                    "DoubleVar", "<class 'tkinter.DoubleVar'>"}, {
                    "BooleanVar", "<class 'tkinter.BooleanVar'>"}, {
                    "mainloop", "<function mainloop at 0x7f48a59abca0>"}, {
                    "getint", "<class 'int'>"}, {
                    "getdouble", "<class 'float'>"}, {
                    "getboolean", 
                    "<function getboolean at 0x7f48a59d19d0>"}, {
                    "Misc", "<class 'tkinter.Misc'>"}, {
                    "CallWrapper", "<class 'tkinter.CallWrapper'>"}, {
                    "XView", "<class 'tkinter.XView'>"}, {
                    "YView", "<class 'tkinter.YView'>"}, {
                    "Wm", "<class 'tkinter.Wm'>"}, {
                    "Tk", "<class 'tkinter.Tk'>"}, {
                    "Tcl", "<function Tcl at 0x7f48a59d1a60>"}, {
                    "Pack", "<class 'tkinter.Pack'>"}, {
                    "Place", "<class 'tkinter.Place'>"}, {
                    "Grid", "<class 'tkinter.Grid'>"}, {
                    "BaseWidget", "<class 'tkinter.BaseWidget'>"}, {
                    "Widget", "<class 'tkinter.Widget'>"}, {
                    "Toplevel", "<class 'tkinter.Toplevel'>"}, {
                    "Button", "<class 'tkinter.Button'>"}, {
                    "Canvas", "<class 'tkinter.Canvas'>"}, {
                    "Checkbutton", "<class 'tkinter.Checkbutton'>"}, {
                    "Entry", "<class 'tkinter.Entry'>"}, {
                    "Frame", "<class 'tkinter.Frame'>"}, {
                    "Label", "<class 'tkinter.Label'>"}, {
                    "Listbox", "<class 'tkinter.Listbox'>"}, {
                    "Menu", "<class 'tkinter.Menu'>"}, {
                    "Menubutton", "<class 'tkinter.Menubutton'>"}, {
                    "Message", "<class 'tkinter.Message'>"}, {
                    "Radiobutton", "<class 'tkinter.Radiobutton'>"}, {
                    "Scale", "<class 'tkinter.Scale'>"}, {
                    "Scrollbar", "<class 'tkinter.Scrollbar'>"}, {
                    "Text", "<class 'tkinter.Text'>"}, {
                    "OptionMenu", "<class 'tkinter.OptionMenu'>"}, {
                    "Image", "<class 'tkinter.Image'>"}, {
                    "PhotoImage", "<class 'tkinter.PhotoImage'>"}, {
                    "BitmapImage", "<class 'tkinter.BitmapImage'>"}, {
                    "image_names", 
                    "<function image_names at 0x7f48a5079940>"}, {
                    "image_types", 
                    "<function image_types at 0x7f48a508b280>"}, {
                    "Spinbox", "<class 'tkinter.Spinbox'>"}, {
                    "LabelFrame", "<class 'tkinter.LabelFrame'>"}, {
                    "PanedWindow", "<class 'tkinter.PanedWindow'>"}, {
                    "matrixReact", "[]"}, {
                    "chemReactNumber", "<class 'chemReactNumber'>"}, {
                    "root", "."}, {"app", ".!chemreactnumber"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style["/usr/lib/python3.9/tkinter/__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ["/usr/lib/python3.9/tkinter/__init__.py"], 
                    SystemOpen["/usr/lib/python3.9/tkinter/__init__.py"]], 
                    Appearance -> "Frameless"], " in ", "destroy"}], 
                    Column[{
                    
                    Column[{"2305.              _default_root = self", 
                    "2306.          self.protocol(\"WM_DELETE_WINDOW\", \
self.destroy)", "2307.  ", "2308.      def destroy(self):", 
                    "2309.          \"\"\"Destroy this and all descendants \
widgets. This will", 
                    "2310.          end the application of this Tcl \
interpreter.\"\"\"", 
                    "2311.          for c in list(self.children.values()): \
c.destroy()", 
                    Item[
                    "2312.          self.tk.call('destroy', self._w)", 
                    Background -> LightYellow], 
                    "2313.          Misc.destroy(self)", 
                    "2314.          global _default_root", 
                    "2315.          if _support_default_root and \
_default_root is self:", "2316.              _default_root = None", "2317.  ",
                     "2318.      def readprofile(self, baseName, \
className):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", "."}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure["PythonError", 
   Association[
   "MessageTemplate" :> 
    "can't invoke \"destroy\" command: application has been destroyed", 
    "MessageParameters" :> Association[], "FailureCode" :> "TclError", 
    "Traceback" :> OpenerView[{
       Row[{
        "TclError", " ", 
         "can't invoke \"destroy\" command: application has been destroyed"}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/Components/\
WolframClientForPython/wolframclient/language/decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/Components/\
WolframClientForPython/wolframclient/language/decorators.py"], 
                SystemOpen[
                "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/Components/\
WolframClientForPython/wolframclient/language/decorators.py"]], Appearance -> 
               "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", 
                "  20.      __traceback_hidden_variables__ = True", "  21.  ",
                 "  22.      try:", 
                Item[
                "  23.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  24.      except Exception as export_exception:", 
                "  25.          try:", "  26.              try:", "  27.  ", 
                "  28.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  29.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"]], Appearance -> 
               "Frameless"], " in ", "handle_message"}], 
            Column[{
              
              Column[{" 171.  ", " 172.  ", 
                " 173.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):", " 174.  ", 
                " 175.      __traceback_hidden_variables__ = True", " 176.  ",
                 " 177.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                Item[
                " 178.      result = evaluate_message(**message)", Background -> 
                 LightYellow], " 179.  ", " 180.      sys.stdout.flush()", 
                " 181.      return result", " 182.  ", " 183.  ", 
                " 184.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"]], Appearance -> 
               "Frameless"], " in ", "evaluate_message"}], 
            Column[{
              
              Column[{" 152.  def evaluate_message(input=None, \
return_type=None, args=None, **opts):", " 153.  ", 
                " 154.      __traceback_hidden_variables__ = True", " 155.  ",
                 " 156.      result = None", " 157.  ", 
                " 158.      if isinstance(input, six.string_types):", 
                Item[
                " 159.          result = execute_from_string(input, **opts)", 
                 Background -> LightYellow], " 160.  ", 
                " 161.      if isinstance(args, (list, tuple)):", 
                " 162.          # then we have a function call to do", 
                " 163.          # first get the function object we need to \
call", " 164.          result = result(*args)", " 165.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/usr/local/Wolfram/Mathematica/12.2/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"]], Appearance -> 
               "Frameless"], " in ", "execute_from_string"}], 
            Column[{
              
              Column[{"  81.  ", "  82.      last_expr = last(expressions)", 
                "  83.  ", "  84.      if isinstance(last_expr, ast.Expr):", 
                "  85.          result = expressions.pop(-1)", "  86.  ", 
                "  87.      if expressions:", 
                Item[
                "  88.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", Background -> LightYellow], "  89.  ", 
                "  90.      if result:", 
                "  91.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", "  92.  ", 
                "  93.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", "  94.          return env[last_expr.name]"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "code", 
                   "from tkinter import *\n\nmatrixReact = []\n\n\nclass \
chemReactNumber(Frame):\n    numberChemReact = 0\n    speciesReact = []\n    \
chemReact = []\n    step = 0\n    chemReactFrameIsFilled = False\n    \
speciesFrameIsFilled = False\n    reactionsFrameIsFilled = False\n    \
noSpeciesStep2 = 0\n    noSpeciesStep3 = 0\n    noChemReacts = 0\n\n    def \
__init__(self, master=None):\n        super().__init__(master)\n        \
master.columnconfigure(0, weight=1)\n        master.columnconfigure(1, \
weight=1)\n        master.rowconfigure(0, weight=10)\n        \
master.rowconfigure(1, weight=1)\n        self.master = master\n        \
self.start()\n\n    def start(self):\n        self.startFrames()\n        \
self.showStep(self.step)\n\n    def startFrames(self):\n        \
self.noChemReactFrame = Frame(root, bg=\"white\")\n        self.speciesFrame \
= Frame(root, bg=\"white\")\n        self.reactionsFrame = Frame(root, \
bg=\"white\")\n        self.frameNav = Frame(root);\n\n    def showStep(self, \
step):\n        self.noChemReactFrame.grid_remove()\n        \
self.speciesFrame.grid_remove()\n        self.reactionsFrame.grid_remove()\n  \
      self.frameNav.grid_remove()\n\n        if (step == 0):\n            \
self.noChemReactFrame.grid(sticky=\"nsew\", row=0, columnspan=2)\n            \
if not self.chemReactFrameIsFilled:\n                \
self.fillChemReactFrame(self.noChemReactFrame)\n                \
self.chemReactFrameIsFilled = True\n\n        elif (step == 1):\n            \
self.speciesFrame.grid(sticky=\"nsew\", row=0, columnspan=2)\n            \
self.fillSpeciesFrame(self.speciesFrame)\n\n        elif (step == 2):\n       \
     self.reactionsFrame.grid(sticky=\"nsew\", row=0, columnspan=2)\n         \
   self.fillChemReactionsFrame(self.reactionsFrame)\n            \
self.reactionsFrameIsFilled = True\n\n        else:\n            \
self.makeChemEqMatrix()\n            root.quit()\n\n        \
self.fillFrameNav(self.frameNav)\n        self.frameNav.grid(row=1)\n\n    \
def fillFrameNav(self, frame):\n        frame.grid()\n        Button(root, \
text='Back', command=self.moveBackStep).grid(\n            row=1, column=0, \
sticky='nesw', pady=10, padx=10)\n        Button(root, text='Next', \
command=self.moveNextStep).grid(\n            row=1, column=1, sticky='nesw', \
pady=10, padx=10)\n\n    def moveNextStep(self):\n        self.step = \
self.step + 1\n        self.showStep(self.step)\n\n    def \
moveBackStep(self):\n        self.step = self.step - 1\n        \
self.showStep(self.step)\n\n    def fillChemReactFrame(self, frame):\n        \
inputFrame = Frame(frame, bg=\"white\")\n        textField1 = \
Frame(inputFrame, bg=\"white\")\n        textField2 = Frame(inputFrame, \
bg=\"white\")\n        Label(textField1, text=\"Number of Species:\", \
bg=\"white\").grid(sticky='nesw', row=0)\n        self.numberSpecies = \
Entry(textField1)\n        self.numberSpecies.grid(sticky='nesw', row=1)\n    \
    Label(textField2, text=\"Number of Chem reactions:\", \
bg=\"white\").grid(row=2)\n        self.numberChemReact = Entry(textField2)\n \
       self.numberChemReact.grid(row=3, sticky='nesw')\n        \
frame.columnconfigure(0, weight=1)\n        inputFrame.grid(pady=10)\n        \
textField1.grid(pady=15, sticky='nesw')\n        textField2.grid(pady=15, \
sticky='nesw')\n\n    def fillSpeciesFrame(self, frame):\n        if \
(self.noSpeciesStep2 != int(self.numberSpecies.get())):\n            \
self.noSpeciesStep2 = int(self.numberSpecies.get())\n            frame.grid()\
\n            Label(frame, text=\"Species names\", bg=\"white\").grid(row=0, \
pady=8)\n            frameSpecies = Frame(frame, bg=\"white\")\n            \
rowSpecie = 1\n            for noSpecie in range(self.noSpeciesStep2):\n      \
          if (noSpecie % 3 == 0):\n                    rowSpecie = rowSpecie \
+ 1\n                    columnSpecies = 0\n                \
Label(frameSpecies, text=\"Species #%i:\" % (noSpecie + 1), \
bg=\"white\").grid(\n                    row=rowSpecie, column=columnSpecies \
* 2)\n                self.speciesReact.append(Entry(frameSpecies, width=10))\
\n                self.speciesReact[noSpecie].grid(\n                    \
row=rowSpecie, column=(columnSpecies * 2) + 1, padx=5, pady=5)\n              \
  columnSpecies = columnSpecies + 1\n            \
frameSpecies.grid(sticky='nesw', pady=15, padx=15, row=1)\n            \
frame.columnconfigure(0, weight=1)\n            \
self.numberChemReact.grid(row=1)\n\n    def fillChemReactionsFrame(self, \
frame):\n        if (self.noSpeciesStep3 != int(self.numberSpecies.get()) or\n\
                self.noChemReacts != int(self.numberChemReact.get())):\n      \
      self.noSpeciesStep3 = int(self.numberSpecies.get())\n            \
self.noChemReacts = int(self.numberChemReact.get())\n            Label(frame, \
text=\"Reactions\", bg=\"white\").grid(pady=8, row=0)\n            \
reactionsFrame = Frame(frame, bg=\"white\")\n\n            for noSpecie in \
range(self.noSpeciesStep3):\n                Label(reactionsFrame, text=\"L \
%s\" % self.speciesReact[noSpecie].get(),bg=\"white\").grid(\n                \
    row=0, column=noSpecie)\n\n            for noSpecie in \
range(self.noSpeciesStep3):\n                Label(reactionsFrame, text=\"R \
%s\" % self.speciesReact[noSpecie].get(),bg=\"white\").grid(\n                \
    row=0, column=(self.noSpeciesStep3 + noSpecie))\n\n            \
Label(reactionsFrame, text=\"==>\", bg=\"white\").grid(row=0, \
column=(self.noSpeciesStep3 * 2))\n\n            for noSpecie in \
range(self.noSpeciesStep3):\n                Label(reactionsFrame, text=\"L \
%s\" % self.speciesReact[noSpecie].get(), bg=\"white\").grid(\n               \
     row=0, column=(noSpecie + (self.noSpeciesStep3 * 2) + 1))\n\n            \
for noSpecie in range(self.noSpeciesStep3):\n                \
Label(reactionsFrame, text=\"R %s\" % self.speciesReact[noSpecie].get(), \
bg=\"white\").grid(\n                    row=0, column=(noSpecie + \
self.noSpeciesStep3 + (self.noSpeciesStep3 * 2) + 1))\n\n            for \
noChemReact in range(self.noChemReacts):\n                \
self.chemReact.append([]);\n                for noSpecie in \
range(self.noSpeciesStep3 * 2):\n                    \
self.chemReact[noChemReact].append(Entry(reactionsFrame, width=5))\n          \
          self.chemReact[noChemReact][noSpecie].grid(\n                       \
 row=noChemReact + 1, column=noSpecie, padx=5, pady=5)\n\n            for \
noChemReact in range(self.noChemReacts):\n                for noSpecie in \
range(self.noSpeciesStep3 * 2):\n                    \
self.chemReact[noChemReact].append(Entry(reactionsFrame, width=5))\n          \
          self.chemReact[noChemReact][noSpecie + (self.noSpeciesStep3 * \
2)].grid(\n                        row=(noChemReact) + 1, column=(noSpecie + \
(self.noSpeciesStep3 * 2)) + 1, padx=5, pady=5)\n\n            \
reactionsFrame.grid(sticky='nesw', pady=15, padx=15, row=1)\n            \
frame.rowconfigure(1, weight=1)\n            frame.columnconfigure(0, \
weight=1)\n\n    def makeChemEqMatrix(self):\n        for i in \
range(len(self.chemReact)):\n            matrixReact.append([])\n            \
for j in range(len(self.chemReact[i])):\n                \
matrixReact[i].append(self.chemReact[i][j].get())\n        n=len(matrixReact)\
\n        for k in range(n):\n            matrixReact.append(matrixReact[k])\n\
\nroot = Tk()\nroot.minsize(600, 250)\nroot.title(\"ODE CHEM\")\napp = \
chemReactNumber(master=root)\napp.mainloop()\nroot.destroy()\nmatrixReact"}, {
                  "globals", "{}"}, {"opts", "{'constants': {}}"}, {
                  "result", "<ast.Expr object at 0x7f48a4486b50>"}, {
                  "expressions", 
                   "[<ast.ImportFrom object at 0x7f48a44f0d90>, <ast.Assign \
object at 0x7f48a44f0d00>, <ast.ClassDef object at 0x7f48a44f0c70>, \
<ast.Assign object at 0x7f48a4486520>, <ast.Expr object at 0x7f48a44865e0>, \
<ast.Expr object at 0x7f48a4486730>, <ast.Assign object at 0x7f48a4486850>, \
<ast.Expr object at 0x7f48a4486970>, <ast.Expr object at 0x7f48a4486a60>]"}, {
                  "last_expr", "<ast.Expr object at 0x7f48a4486b50>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{"<module>", 
            Column[{
              
              Column[{" 166.              matrixReact.append(matrixReact[k])",
                 " 167.  ", " 168.  root = Tk()", 
                " 169.  root.minsize(600, 250)", 
                " 170.  root.title(\"ODE CHEM\")", 
                " 171.  app = chemReactNumber(master=root)", 
                " 172.  app.mainloop()", 
                Item[" 173.  root.destroy()", Background -> LightYellow], 
                " 174.  matrixReact"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "TclError", "<class '_tkinter.TclError'>"}, {"NO", "0"}, {
                  "FALSE", "0"}, {"OFF", "0"}, {"YES", "1"}, {"TRUE", "1"}, {
                  "ON", "1"}, {"N", "n"}, {"S", "s"}, {"W", "w"}, {
                  "E", "e"}, {"NW", "nw"}, {"SW", "sw"}, {"NE", "ne"}, {
                  "SE", "se"}, {"NS", "ns"}, {"EW", "ew"}, {"NSEW", "nsew"}, {
                  "CENTER", "center"}, {"NONE", "none"}, {"X", "x"}, {
                  "Y", "y"}, {"BOTH", "both"}, {"LEFT", "left"}, {
                  "TOP", "top"}, {"RIGHT", "right"}, {"BOTTOM", "bottom"}, {
                  "RAISED", "raised"}, {"SUNKEN", "sunken"}, {
                  "FLAT", "flat"}, {"RIDGE", "ridge"}, {"GROOVE", "groove"}, {
                  "SOLID", "solid"}, {"HORIZONTAL", "horizontal"}, {
                  "VERTICAL", "vertical"}, {"NUMERIC", "numeric"}, {
                  "CHAR", "char"}, {"WORD", "word"}, {
                  "BASELINE", "baseline"}, {"INSIDE", "inside"}, {
                  "OUTSIDE", "outside"}, {"SEL", "sel"}, {
                  "SEL_FIRST", "sel.first"}, {"SEL_LAST", "sel.last"}, {
                  "END", "end"}, {"INSERT", "insert"}, {
                  "CURRENT", "current"}, {"ANCHOR", "anchor"}, {
                  "ALL", "all"}, {"NORMAL", "normal"}, {
                  "DISABLED", "disabled"}, {"ACTIVE", "active"}, {
                  "HIDDEN", "hidden"}, {"CASCADE", "cascade"}, {
                  "CHECKBUTTON", "checkbutton"}, {"COMMAND", "command"}, {
                  "RADIOBUTTON", "radiobutton"}, {"SEPARATOR", "separator"}, {
                  "SINGLE", "single"}, {"BROWSE", "browse"}, {
                  "MULTIPLE", "multiple"}, {"EXTENDED", "extended"}, {
                  "DOTBOX", "dotbox"}, {"UNDERLINE", "underline"}, {
                  "PIESLICE", "pieslice"}, {"CHORD", "chord"}, {
                  "ARC", "arc"}, {"FIRST", "first"}, {"LAST", "last"}, {
                  "BUTT", "butt"}, {"PROJECTING", "projecting"}, {
                  "ROUND", "round"}, {"BEVEL", "bevel"}, {"MITER", "miter"}, {
                  "MOVETO", "moveto"}, {"SCROLL", "scroll"}, {
                  "UNITS", "units"}, {"PAGES", "pages"}, {
                  "TkVersion", "8.6"}, {"TclVersion", "8.6"}, {
                  "READABLE", "2"}, {"WRITABLE", "4"}, {"EXCEPTION", "8"}, {
                  "EventType", "<enum 'EventType'>"}, {
                  "Event", "<class 'tkinter.Event'>"}, {
                  "NoDefaultRoot", 
                   "<function NoDefaultRoot at 0x7f48a59ab9d0>"}, {
                  "Variable", "<class 'tkinter.Variable'>"}, {
                  "StringVar", "<class 'tkinter.StringVar'>"}, {
                  "IntVar", "<class 'tkinter.IntVar'>"}, {
                  "DoubleVar", "<class 'tkinter.DoubleVar'>"}, {
                  "BooleanVar", "<class 'tkinter.BooleanVar'>"}, {
                  "mainloop", "<function mainloop at 0x7f48a59abca0>"}, {
                  "getint", "<class 'int'>"}, {
                  "getdouble", "<class 'float'>"}, {
                  "getboolean", "<function getboolean at 0x7f48a59d19d0>"}, {
                  "Misc", "<class 'tkinter.Misc'>"}, {
                  "CallWrapper", "<class 'tkinter.CallWrapper'>"}, {
                  "XView", "<class 'tkinter.XView'>"}, {
                  "YView", "<class 'tkinter.YView'>"}, {
                  "Wm", "<class 'tkinter.Wm'>"}, {
                  "Tk", "<class 'tkinter.Tk'>"}, {
                  "Tcl", "<function Tcl at 0x7f48a59d1a60>"}, {
                  "Pack", "<class 'tkinter.Pack'>"}, {
                  "Place", "<class 'tkinter.Place'>"}, {
                  "Grid", "<class 'tkinter.Grid'>"}, {
                  "BaseWidget", "<class 'tkinter.BaseWidget'>"}, {
                  "Widget", "<class 'tkinter.Widget'>"}, {
                  "Toplevel", "<class 'tkinter.Toplevel'>"}, {
                  "Button", "<class 'tkinter.Button'>"}, {
                  "Canvas", "<class 'tkinter.Canvas'>"}, {
                  "Checkbutton", "<class 'tkinter.Checkbutton'>"}, {
                  "Entry", "<class 'tkinter.Entry'>"}, {
                  "Frame", "<class 'tkinter.Frame'>"}, {
                  "Label", "<class 'tkinter.Label'>"}, {
                  "Listbox", "<class 'tkinter.Listbox'>"}, {
                  "Menu", "<class 'tkinter.Menu'>"}, {
                  "Menubutton", "<class 'tkinter.Menubutton'>"}, {
                  "Message", "<class 'tkinter.Message'>"}, {
                  "Radiobutton", "<class 'tkinter.Radiobutton'>"}, {
                  "Scale", "<class 'tkinter.Scale'>"}, {
                  "Scrollbar", "<class 'tkinter.Scrollbar'>"}, {
                  "Text", "<class 'tkinter.Text'>"}, {
                  "OptionMenu", "<class 'tkinter.OptionMenu'>"}, {
                  "Image", "<class 'tkinter.Image'>"}, {
                  "PhotoImage", "<class 'tkinter.PhotoImage'>"}, {
                  "BitmapImage", "<class 'tkinter.BitmapImage'>"}, {
                  "image_names", 
                   "<function image_names at 0x7f48a5079940>"}, {
                  "image_types", 
                   "<function image_types at 0x7f48a508b280>"}, {
                  "Spinbox", "<class 'tkinter.Spinbox'>"}, {
                  "LabelFrame", "<class 'tkinter.LabelFrame'>"}, {
                  "PanedWindow", "<class 'tkinter.PanedWindow'>"}, {
                  "matrixReact", "[]"}, {
                  "chemReactNumber", "<class 'chemReactNumber'>"}, {
                  "root", "."}, {"app", ".!chemreactnumber"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style["/usr/lib/python3.9/tkinter/__init__.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ["/usr/lib/python3.9/tkinter/__init__.py"], 
                SystemOpen["/usr/lib/python3.9/tkinter/__init__.py"]], 
               Appearance -> "Frameless"], " in ", "destroy"}], 
            Column[{
              
              Column[{"2305.              _default_root = self", 
                "2306.          self.protocol(\"WM_DELETE_WINDOW\", \
self.destroy)", "2307.  ", "2308.      def destroy(self):", 
                "2309.          \"\"\"Destroy this and all descendants \
widgets. This will", 
                "2310.          end the application of this Tcl \
interpreter.\"\"\"", 
                "2311.          for c in list(self.children.values()): \
c.destroy()", 
                Item[
                "2312.          self.tk.call('destroy', self._w)", Background -> 
                 LightYellow], "2313.          Misc.destroy(self)", 
                "2314.          global _default_root", 
                "2315.          if _support_default_root and _default_root is \
self:", "2316.              _default_root = None", "2317.  ", 
                "2318.      def readprofile(self, baseName, className):"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {"self", "."}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True]}], FontFamily -> "Courier"]}, True]]],
  
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8306378523156557`*^9, 3.830637858440381*^9}, {
   3.8306378884594812`*^9, 3.830637905655127*^9}, 3.83063794008668*^9, 
   3.830639838237103*^9, {3.830639919475422*^9, 3.8306399600423927`*^9}, {
   3.830639997658534*^9, 3.8306400196575193`*^9}, {3.830640089785643*^9, 
   3.8306401251844788`*^9}},
 CellLabel->"Out[28]=",ExpressionUUID->"c2fcb3c8-be56-4e4a-9e84-41a331eebac7"]
}, Open  ]]
},
WindowSize->{606., 658.5},
WindowMargins->{{Automatic, 368.25}, {-33, Automatic}},
FrontEndVersion->"12.2 for Linux x86 (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"1551ac72-ffe8-466c-88a7-4e9db50fa581"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 292, 6, 29, "Input",ExpressionUUID->"d2502aae-c5e8-4630-b1d9-088bf79c5ad8"],
Cell[CellGroupData[{
Cell[875, 30, 539, 10, 29, "Input",ExpressionUUID->"d4a07d14-ac54-41ec-b099-e209095eeed9"],
Cell[1417, 42, 151938, 2503, 95, "Output",ExpressionUUID->"c2fcb3c8-be56-4e4a-9e84-41a331eebac7"]
}, Open  ]]
}
]
*)

